// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class TEST;
struct TESTDefaultTypeInternal;
extern TESTDefaultTypeInternal _TEST_default_instance_;
class vector;
struct vectorDefaultTypeInternal;
extern vectorDefaultTypeInternal _vector_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::TEST* Arena::CreateMaybeMessage<::Protocol::TEST>(Arena*);
template<> ::Protocol::vector* Arena::CreateMaybeMessage<::Protocol::vector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class vector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.vector) */ {
 public:
  inline vector() : vector(nullptr) {}
  ~vector() override;
  explicit PROTOBUF_CONSTEXPR vector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  vector(const vector& from);
  vector(vector&& from) noexcept
    : vector() {
    *this = ::std::move(from);
  }

  inline vector& operator=(const vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline vector& operator=(vector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const vector& default_instance() {
    return *internal_default_instance();
  }
  static inline const vector* internal_default_instance() {
    return reinterpret_cast<const vector*>(
               &_vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(vector& a, vector& b) {
    a.Swap(&b);
  }
  inline void Swap(vector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(vector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<vector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const vector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const vector& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(vector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.vector";
  }
  protected:
  explicit vector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // int32 data = 1;
  void clear_data();
  int32_t data() const;
  void set_data(int32_t value);
  private:
  int32_t _internal_data() const;
  void _internal_set_data(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.vector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class TEST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.TEST) */ {
 public:
  inline TEST() : TEST(nullptr) {}
  ~TEST() override;
  explicit PROTOBUF_CONSTEXPR TEST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TEST(const TEST& from);
  TEST(TEST&& from) noexcept
    : TEST() {
    *this = ::std::move(from);
  }

  inline TEST& operator=(const TEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline TEST& operator=(TEST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TEST& default_instance() {
    return *internal_default_instance();
  }
  static inline const TEST* internal_default_instance() {
    return reinterpret_cast<const TEST*>(
               &_TEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TEST& a, TEST& b) {
    a.Swap(&b);
  }
  inline void Swap(TEST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TEST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TEST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TEST& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TEST& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TEST* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.TEST";
  }
  protected:
  explicit TEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kVecFieldNumber = 4,
    kIdFieldNumber = 1,
    kHpFieldNumber = 2,
  };
  // repeated string name = 3;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // repeated .Protocol.vector vec = 4;
  int vec_size() const;
  private:
  int _internal_vec_size() const;
  public:
  void clear_vec();
  ::Protocol::vector* mutable_vec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::vector >*
      mutable_vec();
  private:
  const ::Protocol::vector& _internal_vec(int index) const;
  ::Protocol::vector* _internal_add_vec();
  public:
  const ::Protocol::vector& vec(int index) const;
  ::Protocol::vector* add_vec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::vector >&
      vec() const;

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // uint32 hp = 2;
  void clear_hp();
  uint32_t hp() const;
  void set_hp(uint32_t value);
  private:
  uint32_t _internal_hp() const;
  void _internal_set_hp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.TEST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::vector > vec_;
  int32_t id_;
  uint32_t hp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// vector

// int32 data = 1;
inline void vector::clear_data() {
  data_ = 0;
}
inline int32_t vector::_internal_data() const {
  return data_;
}
inline int32_t vector::data() const {
  // @@protoc_insertion_point(field_get:Protocol.vector.data)
  return _internal_data();
}
inline void vector::_internal_set_data(int32_t value) {
  
  data_ = value;
}
inline void vector::set_data(int32_t value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:Protocol.vector.data)
}

// -------------------------------------------------------------------

// TEST

// int32 id = 1;
inline void TEST::clear_id() {
  id_ = 0;
}
inline int32_t TEST::_internal_id() const {
  return id_;
}
inline int32_t TEST::id() const {
  // @@protoc_insertion_point(field_get:Protocol.TEST.id)
  return _internal_id();
}
inline void TEST::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void TEST::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.TEST.id)
}

// uint32 hp = 2;
inline void TEST::clear_hp() {
  hp_ = 0u;
}
inline uint32_t TEST::_internal_hp() const {
  return hp_;
}
inline uint32_t TEST::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.TEST.hp)
  return _internal_hp();
}
inline void TEST::_internal_set_hp(uint32_t value) {
  
  hp_ = value;
}
inline void TEST::set_hp(uint32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.TEST.hp)
}

// repeated string name = 3;
inline int TEST::_internal_name_size() const {
  return name_.size();
}
inline int TEST::name_size() const {
  return _internal_name_size();
}
inline void TEST::clear_name() {
  name_.Clear();
}
inline std::string* TEST::add_name() {
  std::string* _s = _internal_add_name();
  // @@protoc_insertion_point(field_add_mutable:Protocol.TEST.name)
  return _s;
}
inline const std::string& TEST::_internal_name(int index) const {
  return name_.Get(index);
}
inline const std::string& TEST::name(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.TEST.name)
  return _internal_name(index);
}
inline std::string* TEST::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.TEST.name)
  return name_.Mutable(index);
}
inline void TEST::set_name(int index, const std::string& value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.TEST.name)
}
inline void TEST::set_name(int index, std::string&& value) {
  name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Protocol.TEST.name)
}
inline void TEST::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.TEST.name)
}
inline void TEST::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.TEST.name)
}
inline std::string* TEST::_internal_add_name() {
  return name_.Add();
}
inline void TEST::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Protocol.TEST.name)
}
inline void TEST::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Protocol.TEST.name)
}
inline void TEST::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Protocol.TEST.name)
}
inline void TEST::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Protocol.TEST.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TEST::name() const {
  // @@protoc_insertion_point(field_list:Protocol.TEST.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TEST::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.TEST.name)
  return &name_;
}

// repeated .Protocol.vector vec = 4;
inline int TEST::_internal_vec_size() const {
  return vec_.size();
}
inline int TEST::vec_size() const {
  return _internal_vec_size();
}
inline void TEST::clear_vec() {
  vec_.Clear();
}
inline ::Protocol::vector* TEST::mutable_vec(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.TEST.vec)
  return vec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::vector >*
TEST::mutable_vec() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.TEST.vec)
  return &vec_;
}
inline const ::Protocol::vector& TEST::_internal_vec(int index) const {
  return vec_.Get(index);
}
inline const ::Protocol::vector& TEST::vec(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.TEST.vec)
  return _internal_vec(index);
}
inline ::Protocol::vector* TEST::_internal_add_vec() {
  return vec_.Add();
}
inline ::Protocol::vector* TEST::add_vec() {
  ::Protocol::vector* _add = _internal_add_vec();
  // @@protoc_insertion_point(field_add:Protocol.TEST.vec)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::vector >&
TEST::vec() const {
  // @@protoc_insertion_point(field_list:Protocol.TEST.vec)
  return vec_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

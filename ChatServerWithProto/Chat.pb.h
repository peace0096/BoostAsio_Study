// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Chat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Chat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Chat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Chat_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Chat_2eproto;
namespace chat {
class ChatNoti;
struct ChatNotiDefaultTypeInternal;
extern ChatNotiDefaultTypeInternal _ChatNoti_default_instance_;
class ChatReq;
struct ChatReqDefaultTypeInternal;
extern ChatReqDefaultTypeInternal _ChatReq_default_instance_;
class ChatRes;
struct ChatResDefaultTypeInternal;
extern ChatResDefaultTypeInternal _ChatRes_default_instance_;
class ListReq;
struct ListReqDefaultTypeInternal;
extern ListReqDefaultTypeInternal _ListReq_default_instance_;
class ListRes;
struct ListResDefaultTypeInternal;
extern ListResDefaultTypeInternal _ListRes_default_instance_;
class LoginReq;
struct LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class LoginRes;
struct LoginResDefaultTypeInternal;
extern LoginResDefaultTypeInternal _LoginRes_default_instance_;
}  // namespace chat
PROTOBUF_NAMESPACE_OPEN
template<> ::chat::ChatNoti* Arena::CreateMaybeMessage<::chat::ChatNoti>(Arena*);
template<> ::chat::ChatReq* Arena::CreateMaybeMessage<::chat::ChatReq>(Arena*);
template<> ::chat::ChatRes* Arena::CreateMaybeMessage<::chat::ChatRes>(Arena*);
template<> ::chat::ListReq* Arena::CreateMaybeMessage<::chat::ListReq>(Arena*);
template<> ::chat::ListRes* Arena::CreateMaybeMessage<::chat::ListRes>(Arena*);
template<> ::chat::LoginReq* Arena::CreateMaybeMessage<::chat::LoginReq>(Arena*);
template<> ::chat::LoginRes* Arena::CreateMaybeMessage<::chat::LoginRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chat {

enum MessageCode : int {
  NONE = 0,
  LOGIN_REQ = 1,
  LOGIN_RES = 2,
  CHAT_REQ = 3,
  CHAT_RES = 4,
  CHAT_NOTI = 5,
  LIST_REQ = 6,
  LIST_RES = 7,
  MessageCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageCode_IsValid(int value);
constexpr MessageCode MessageCode_MIN = NONE;
constexpr MessageCode MessageCode_MAX = LIST_RES;
constexpr int MessageCode_ARRAYSIZE = MessageCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageCode_descriptor();
template<typename T>
inline const std::string& MessageCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageCode_descriptor(), enum_t_value);
}
inline bool MessageCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageCode>(
    MessageCode_descriptor(), name, value);
}
// ===================================================================

class LoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.LoginReq) */ {
 public:
  inline LoginReq() : LoginReq(nullptr) {}
  ~LoginReq() override;
  explicit PROTOBUF_CONSTEXPR LoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginReq(const LoginReq& from);
  LoginReq(LoginReq&& from) noexcept
    : LoginReq() {
    *this = ::std::move(from);
  }

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReq& operator=(LoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginReq& a, LoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.LoginReq";
  }
  protected:
  explicit LoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // repeated string name = 1;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // @@protoc_insertion_point(class_scope:chat.LoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class LoginRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.LoginRes) */ {
 public:
  inline LoginRes() : LoginRes(nullptr) {}
  ~LoginRes() override;
  explicit PROTOBUF_CONSTEXPR LoginRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRes(const LoginRes& from);
  LoginRes(LoginRes&& from) noexcept
    : LoginRes() {
    *this = ::std::move(from);
  }

  inline LoginRes& operator=(const LoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRes& operator=(LoginRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRes* internal_default_instance() {
    return reinterpret_cast<const LoginRes*>(
               &_LoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginRes& a, LoginRes& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.LoginRes";
  }
  protected:
  explicit LoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:chat.LoginRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class ListReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:chat.ListReq) */ {
 public:
  inline ListReq() : ListReq(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListReq(const ListReq& from);
  ListReq(ListReq&& from) noexcept
    : ListReq() {
    *this = ::std::move(from);
  }

  inline ListReq& operator=(const ListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListReq& operator=(ListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListReq* internal_default_instance() {
    return reinterpret_cast<const ListReq*>(
               &_ListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListReq& a, ListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ListReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ListReq";
  }
  protected:
  explicit ListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:chat.ListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class ListRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ListRes) */ {
 public:
  inline ListRes() : ListRes(nullptr) {}
  ~ListRes() override;
  explicit PROTOBUF_CONSTEXPR ListRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRes(const ListRes& from);
  ListRes(ListRes&& from) noexcept
    : ListRes() {
    *this = ::std::move(from);
  }

  inline ListRes& operator=(const ListRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRes& operator=(ListRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRes* internal_default_instance() {
    return reinterpret_cast<const ListRes*>(
               &_ListRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListRes& a, ListRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ListRes";
  }
  protected:
  explicit ListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 1,
  };
  // repeated string names = 1;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // @@protoc_insertion_point(class_scope:chat.ListRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class ChatReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ChatReq) */ {
 public:
  inline ChatReq() : ChatReq(nullptr) {}
  ~ChatReq() override;
  explicit PROTOBUF_CONSTEXPR ChatReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatReq(const ChatReq& from);
  ChatReq(ChatReq&& from) noexcept
    : ChatReq() {
    *this = ::std::move(from);
  }

  inline ChatReq& operator=(const ChatReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatReq& operator=(ChatReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatReq* internal_default_instance() {
    return reinterpret_cast<const ChatReq*>(
               &_ChatReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChatReq& a, ChatReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ChatReq";
  }
  protected:
  explicit ChatReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // repeated string message = 1;
  int message_size() const;
  private:
  int _internal_message_size() const;
  public:
  void clear_message();
  const std::string& message(int index) const;
  std::string* mutable_message(int index);
  void set_message(int index, const std::string& value);
  void set_message(int index, std::string&& value);
  void set_message(int index, const char* value);
  void set_message(int index, const char* value, size_t size);
  std::string* add_message();
  void add_message(const std::string& value);
  void add_message(std::string&& value);
  void add_message(const char* value);
  void add_message(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& message() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_message();
  private:
  const std::string& _internal_message(int index) const;
  std::string* _internal_add_message();
  public:

  // @@protoc_insertion_point(class_scope:chat.ChatReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class ChatRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ChatRes) */ {
 public:
  inline ChatRes() : ChatRes(nullptr) {}
  ~ChatRes() override;
  explicit PROTOBUF_CONSTEXPR ChatRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatRes(const ChatRes& from);
  ChatRes(ChatRes&& from) noexcept
    : ChatRes() {
    *this = ::std::move(from);
  }

  inline ChatRes& operator=(const ChatRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatRes& operator=(ChatRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatRes* internal_default_instance() {
    return reinterpret_cast<const ChatRes*>(
               &_ChatRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChatRes& a, ChatRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ChatRes";
  }
  protected:
  explicit ChatRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:chat.ChatRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class ChatNoti final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ChatNoti) */ {
 public:
  inline ChatNoti() : ChatNoti(nullptr) {}
  ~ChatNoti() override;
  explicit PROTOBUF_CONSTEXPR ChatNoti(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatNoti(const ChatNoti& from);
  ChatNoti(ChatNoti&& from) noexcept
    : ChatNoti() {
    *this = ::std::move(from);
  }

  inline ChatNoti& operator=(const ChatNoti& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatNoti& operator=(ChatNoti&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatNoti& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatNoti* internal_default_instance() {
    return reinterpret_cast<const ChatNoti*>(
               &_ChatNoti_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChatNoti& a, ChatNoti& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatNoti* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatNoti* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatNoti* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatNoti>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatNoti& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatNoti& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatNoti* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ChatNoti";
  }
  protected:
  explicit ChatNoti(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // repeated string sender = 1;
  int sender_size() const;
  private:
  int _internal_sender_size() const;
  public:
  void clear_sender();
  const std::string& sender(int index) const;
  std::string* mutable_sender(int index);
  void set_sender(int index, const std::string& value);
  void set_sender(int index, std::string&& value);
  void set_sender(int index, const char* value);
  void set_sender(int index, const char* value, size_t size);
  std::string* add_sender();
  void add_sender(const std::string& value);
  void add_sender(std::string&& value);
  void add_sender(const char* value);
  void add_sender(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sender() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sender();
  private:
  const std::string& _internal_sender(int index) const;
  std::string* _internal_add_sender();
  public:

  // repeated string message = 2;
  int message_size() const;
  private:
  int _internal_message_size() const;
  public:
  void clear_message();
  const std::string& message(int index) const;
  std::string* mutable_message(int index);
  void set_message(int index, const std::string& value);
  void set_message(int index, std::string&& value);
  void set_message(int index, const char* value);
  void set_message(int index, const char* value, size_t size);
  std::string* add_message();
  void add_message(const std::string& value);
  void add_message(std::string&& value);
  void add_message(const char* value);
  void add_message(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& message() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_message();
  private:
  const std::string& _internal_message(int index) const;
  std::string* _internal_add_message();
  public:

  // @@protoc_insertion_point(class_scope:chat.ChatNoti)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sender_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginReq

// repeated string name = 1;
inline int LoginReq::_internal_name_size() const {
  return name_.size();
}
inline int LoginReq::name_size() const {
  return _internal_name_size();
}
inline void LoginReq::clear_name() {
  name_.Clear();
}
inline std::string* LoginReq::add_name() {
  std::string* _s = _internal_add_name();
  // @@protoc_insertion_point(field_add_mutable:chat.LoginReq.name)
  return _s;
}
inline const std::string& LoginReq::_internal_name(int index) const {
  return name_.Get(index);
}
inline const std::string& LoginReq::name(int index) const {
  // @@protoc_insertion_point(field_get:chat.LoginReq.name)
  return _internal_name(index);
}
inline std::string* LoginReq::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:chat.LoginReq.name)
  return name_.Mutable(index);
}
inline void LoginReq::set_name(int index, const std::string& value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:chat.LoginReq.name)
}
inline void LoginReq::set_name(int index, std::string&& value) {
  name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:chat.LoginReq.name)
}
inline void LoginReq::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.LoginReq.name)
}
inline void LoginReq::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.LoginReq.name)
}
inline std::string* LoginReq::_internal_add_name() {
  return name_.Add();
}
inline void LoginReq::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.LoginReq.name)
}
inline void LoginReq::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chat.LoginReq.name)
}
inline void LoginReq::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.LoginReq.name)
}
inline void LoginReq::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.LoginReq.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LoginReq::name() const {
  // @@protoc_insertion_point(field_list:chat.LoginReq.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LoginReq::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:chat.LoginReq.name)
  return &name_;
}

// -------------------------------------------------------------------

// LoginRes

// bool result = 1;
inline void LoginRes::clear_result() {
  result_ = false;
}
inline bool LoginRes::_internal_result() const {
  return result_;
}
inline bool LoginRes::result() const {
  // @@protoc_insertion_point(field_get:chat.LoginRes.result)
  return _internal_result();
}
inline void LoginRes::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void LoginRes::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:chat.LoginRes.result)
}

// -------------------------------------------------------------------

// ListReq

// -------------------------------------------------------------------

// ListRes

// repeated string names = 1;
inline int ListRes::_internal_names_size() const {
  return names_.size();
}
inline int ListRes::names_size() const {
  return _internal_names_size();
}
inline void ListRes::clear_names() {
  names_.Clear();
}
inline std::string* ListRes::add_names() {
  std::string* _s = _internal_add_names();
  // @@protoc_insertion_point(field_add_mutable:chat.ListRes.names)
  return _s;
}
inline const std::string& ListRes::_internal_names(int index) const {
  return names_.Get(index);
}
inline const std::string& ListRes::names(int index) const {
  // @@protoc_insertion_point(field_get:chat.ListRes.names)
  return _internal_names(index);
}
inline std::string* ListRes::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:chat.ListRes.names)
  return names_.Mutable(index);
}
inline void ListRes::set_names(int index, const std::string& value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:chat.ListRes.names)
}
inline void ListRes::set_names(int index, std::string&& value) {
  names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:chat.ListRes.names)
}
inline void ListRes::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.ListRes.names)
}
inline void ListRes::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.ListRes.names)
}
inline std::string* ListRes::_internal_add_names() {
  return names_.Add();
}
inline void ListRes::add_names(const std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.ListRes.names)
}
inline void ListRes::add_names(std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chat.ListRes.names)
}
inline void ListRes::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.ListRes.names)
}
inline void ListRes::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.ListRes.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListRes::names() const {
  // @@protoc_insertion_point(field_list:chat.ListRes.names)
  return names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListRes::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:chat.ListRes.names)
  return &names_;
}

// -------------------------------------------------------------------

// ChatReq

// repeated string message = 1;
inline int ChatReq::_internal_message_size() const {
  return message_.size();
}
inline int ChatReq::message_size() const {
  return _internal_message_size();
}
inline void ChatReq::clear_message() {
  message_.Clear();
}
inline std::string* ChatReq::add_message() {
  std::string* _s = _internal_add_message();
  // @@protoc_insertion_point(field_add_mutable:chat.ChatReq.message)
  return _s;
}
inline const std::string& ChatReq::_internal_message(int index) const {
  return message_.Get(index);
}
inline const std::string& ChatReq::message(int index) const {
  // @@protoc_insertion_point(field_get:chat.ChatReq.message)
  return _internal_message(index);
}
inline std::string* ChatReq::mutable_message(int index) {
  // @@protoc_insertion_point(field_mutable:chat.ChatReq.message)
  return message_.Mutable(index);
}
inline void ChatReq::set_message(int index, const std::string& value) {
  message_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:chat.ChatReq.message)
}
inline void ChatReq::set_message(int index, std::string&& value) {
  message_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:chat.ChatReq.message)
}
inline void ChatReq::set_message(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  message_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.ChatReq.message)
}
inline void ChatReq::set_message(int index, const char* value, size_t size) {
  message_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.ChatReq.message)
}
inline std::string* ChatReq::_internal_add_message() {
  return message_.Add();
}
inline void ChatReq::add_message(const std::string& value) {
  message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.ChatReq.message)
}
inline void ChatReq::add_message(std::string&& value) {
  message_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chat.ChatReq.message)
}
inline void ChatReq::add_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.ChatReq.message)
}
inline void ChatReq::add_message(const char* value, size_t size) {
  message_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.ChatReq.message)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChatReq::message() const {
  // @@protoc_insertion_point(field_list:chat.ChatReq.message)
  return message_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChatReq::mutable_message() {
  // @@protoc_insertion_point(field_mutable_list:chat.ChatReq.message)
  return &message_;
}

// -------------------------------------------------------------------

// ChatRes

// bool result = 1;
inline void ChatRes::clear_result() {
  result_ = false;
}
inline bool ChatRes::_internal_result() const {
  return result_;
}
inline bool ChatRes::result() const {
  // @@protoc_insertion_point(field_get:chat.ChatRes.result)
  return _internal_result();
}
inline void ChatRes::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void ChatRes::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:chat.ChatRes.result)
}

// -------------------------------------------------------------------

// ChatNoti

// repeated string sender = 1;
inline int ChatNoti::_internal_sender_size() const {
  return sender_.size();
}
inline int ChatNoti::sender_size() const {
  return _internal_sender_size();
}
inline void ChatNoti::clear_sender() {
  sender_.Clear();
}
inline std::string* ChatNoti::add_sender() {
  std::string* _s = _internal_add_sender();
  // @@protoc_insertion_point(field_add_mutable:chat.ChatNoti.sender)
  return _s;
}
inline const std::string& ChatNoti::_internal_sender(int index) const {
  return sender_.Get(index);
}
inline const std::string& ChatNoti::sender(int index) const {
  // @@protoc_insertion_point(field_get:chat.ChatNoti.sender)
  return _internal_sender(index);
}
inline std::string* ChatNoti::mutable_sender(int index) {
  // @@protoc_insertion_point(field_mutable:chat.ChatNoti.sender)
  return sender_.Mutable(index);
}
inline void ChatNoti::set_sender(int index, const std::string& value) {
  sender_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:chat.ChatNoti.sender)
}
inline void ChatNoti::set_sender(int index, std::string&& value) {
  sender_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:chat.ChatNoti.sender)
}
inline void ChatNoti::set_sender(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sender_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.ChatNoti.sender)
}
inline void ChatNoti::set_sender(int index, const char* value, size_t size) {
  sender_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.ChatNoti.sender)
}
inline std::string* ChatNoti::_internal_add_sender() {
  return sender_.Add();
}
inline void ChatNoti::add_sender(const std::string& value) {
  sender_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.ChatNoti.sender)
}
inline void ChatNoti::add_sender(std::string&& value) {
  sender_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chat.ChatNoti.sender)
}
inline void ChatNoti::add_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sender_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.ChatNoti.sender)
}
inline void ChatNoti::add_sender(const char* value, size_t size) {
  sender_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.ChatNoti.sender)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChatNoti::sender() const {
  // @@protoc_insertion_point(field_list:chat.ChatNoti.sender)
  return sender_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChatNoti::mutable_sender() {
  // @@protoc_insertion_point(field_mutable_list:chat.ChatNoti.sender)
  return &sender_;
}

// repeated string message = 2;
inline int ChatNoti::_internal_message_size() const {
  return message_.size();
}
inline int ChatNoti::message_size() const {
  return _internal_message_size();
}
inline void ChatNoti::clear_message() {
  message_.Clear();
}
inline std::string* ChatNoti::add_message() {
  std::string* _s = _internal_add_message();
  // @@protoc_insertion_point(field_add_mutable:chat.ChatNoti.message)
  return _s;
}
inline const std::string& ChatNoti::_internal_message(int index) const {
  return message_.Get(index);
}
inline const std::string& ChatNoti::message(int index) const {
  // @@protoc_insertion_point(field_get:chat.ChatNoti.message)
  return _internal_message(index);
}
inline std::string* ChatNoti::mutable_message(int index) {
  // @@protoc_insertion_point(field_mutable:chat.ChatNoti.message)
  return message_.Mutable(index);
}
inline void ChatNoti::set_message(int index, const std::string& value) {
  message_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:chat.ChatNoti.message)
}
inline void ChatNoti::set_message(int index, std::string&& value) {
  message_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:chat.ChatNoti.message)
}
inline void ChatNoti::set_message(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  message_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.ChatNoti.message)
}
inline void ChatNoti::set_message(int index, const char* value, size_t size) {
  message_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.ChatNoti.message)
}
inline std::string* ChatNoti::_internal_add_message() {
  return message_.Add();
}
inline void ChatNoti::add_message(const std::string& value) {
  message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.ChatNoti.message)
}
inline void ChatNoti::add_message(std::string&& value) {
  message_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chat.ChatNoti.message)
}
inline void ChatNoti::add_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.ChatNoti.message)
}
inline void ChatNoti::add_message(const char* value, size_t size) {
  message_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.ChatNoti.message)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChatNoti::message() const {
  // @@protoc_insertion_point(field_list:chat.ChatNoti.message)
  return message_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChatNoti::mutable_message() {
  // @@protoc_insertion_point(field_mutable_list:chat.ChatNoti.message)
  return &message_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::chat::MessageCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::MessageCode>() {
  return ::chat::MessageCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Chat_2eproto
